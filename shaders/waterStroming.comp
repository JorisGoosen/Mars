#version 440

layout(local_size_x = 16) in;

#define ID gl_GlobalInvocationID.x

struct vak
{
	int		grondSoort	;
	float 	grondHoogte	;
	float	waterHoogte	;
	float	leven		;
	int		iets		;
	int		burenAantal	;
	int		buren[6]	;
	int		pijpen[6]	;
};

struct pijp
{
	float 	stroming 	;
};


layout(std430, binding = 0) buffer 			pingVak 	{ vak vakken0[]; };
layout(std430, binding = 1) buffer 			pongVak 	{ vak vakken1[]; };

layout(std430, binding = 2) buffer 			pingPijp 	{ pijp pijpen0[]; };
layout(std430, binding = 3) buffer 			pongPijp 	{ pijp pijpen1[]; };

void main()
{
	float 	waterHier 	= vakken0[ID].waterHoogte;
	int 	aantalBuren = vakken0[ID].burenAantal;

	for(int buur=0; buur < aantalBuren && buur < 6; buur++)
	{
		int buurID = vakken0[ID].buren[buur];

		//Zodat iedere stroming maar 1 maal bijgewerkt wordt
		if(ID < buurID)
		{
			int 	pijp 			= vakken0[ID].pijpen[buur];
			float 	waterBuur 		= vakken0[buurID].waterHoogte,
					stroomVerschil	= waterHier - waterBuur;

			if(abs(stroomVerschil) > 0)
			{
				if		(stroomVerschil > 0)	stroomVerschil = stroomVerschil / aantalBuren; 					//max(-1 / aantalBuren, 					*/ -waterHier / aantalBuren; //);
				else if	(stroomVerschil < 0)	stroomVerschil = stroomVerschil / vakken0[buurID].burenAantal; 	///min( 1 / vakken0[buurID].burenAantal,	*/ waterBuur / vakken0[buurID].burenAantal; //);
			}

			pijpen1[pijp].stroming = stroomVerschil;

			// Hier iets doen dus. Maar wat?
		}
	}
}