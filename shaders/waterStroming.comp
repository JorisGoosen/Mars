#version 440

layout(local_size_x = 16) in;

#define ID gl_GlobalInvocationID.x

struct vak
{
	int		grondSoort	;
	float 	grondHoogte	;
	float	waterHoogte	;
	float	leven		;
	int		iets		;
	float	pijpen[6]	;
	uint	burenAantal	;
	uint	buren[6]	;
};


layout(std430, binding = 0) buffer 			pingVak 	{ vak vakken0[]; };
layout(std430, binding = 1) buffer 			pongVak 	{ vak vakken1[]; };

#define TIJD_VERSCHIL 	1.0
#define ZWAARTEKRACHT 	0.6
#define PIJP_DOORSNEE 	0.001
#define PIJP_LENGTE   	1.0

uniform float grondMult;

float hoogteverschil(uint buurID)
{
	return ((grondMult * vakken0[ID].grondHoogte) + vakken0[ID].waterHoogte) - ((grondMult * vakken0[buurID].grondHoogte) + vakken0[buurID].waterHoogte);
}

void main()
{
	float	fluxen		= 0.0f;
	uint 	aantalBuren = vakken0[ID].burenAantal;

	for(uint buur=0; buur < aantalBuren && buur < 6; buur++)
	{
		uint 	buurID 	= vakken0[ID].buren[buur];
		float 	flux 	= max(0, vakken0[ID].pijpen[buur] + (TIJD_VERSCHIL * PIJP_DOORSNEE * ( ( ZWAARTEKRACHT * hoogteverschil(buurID) ) / PIJP_LENGTE ) ) );


		vakken1[ID].pijpen[buur] = flux; 
		fluxen += flux;
	}

	memoryBarrier();

	float K = max(0, min(1, (PIJP_LENGTE * vakken0[ID].waterHoogte) / (fluxen * TIJD_VERSCHIL) ) );

	for(uint buur=0; buur < aantalBuren && buur < 6; buur++)
		vakken1[ID].pijpen[buur] = K * vakken1[ID].pijpen[buur];
}