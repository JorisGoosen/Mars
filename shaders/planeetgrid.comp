#version 440

layout(local_size_x = 16) in;

#define GS_ZAND		0
#define GS_GROND	1	//Ook wel humus of rijke grond
#define GS_ROTS		2
#define GS_KLEI		3
#define GS_IJS		4
#define GS_LOESS	5

#define ID gl_GlobalInvocationID.x

struct vak
{
	int		grondSoort	;
	float 	grondHoogte	;
	float	waterHoogte	;
	float	leven		;
	int		iets		;
	int		burenAantal	;
	int		buren[6]	;
	int		pijpen[6]	;
};

struct pijp
{
	float 	stroming 	;
};


layout(std430, binding = 0) buffer 			pingVak 	{ vak vakken0[]; };
layout(std430, binding = 1) buffer 			pongVak 	{ vak vakken1[]; };

layout(std430, binding = 2) buffer 			pingPijp 	{ pijp pijpen0[]; };
layout(std430, binding = 3) buffer 			pongPijp 	{ pijp pijpen1[]; };

const float grondMult = 10;

float grondHoogte(uint deze)
{
	return vakken0[deze].grondHoogte * grondMult;
}

#define MAX_WATER 4

float waterVerschil(uint ander)
{

	if(ander == -1) return 0;
	if(grondHoogte(ID) > (vakken0[ander].waterHoogte + grondHoogte(ander) ))
	{
		return max(-MAX_WATER, -vakken0[ID].waterHoogte / vakken0[ID].burenAantal);
	}
	else if(grondHoogte(ander) > (vakken0[ID].waterHoogte + grondHoogte(ID) ))
	{
		return min(MAX_WATER, vakken0[ander].waterHoogte / vakken0[ander].burenAantal);
	}
	else
	{
		float val = (vakken0[ander].waterHoogte + grondHoogte(ander)) - (vakken0[ID].waterHoogte + grondHoogte(ID));
		return (val < 0 ? max(-MAX_WATER, val / vakken0[ID].burenAantal) : min(MAX_WATER, val / vakken0[ander].burenAantal)) ;
	}
}

float grondVerschil(uint ander)
{
	if(ander == -1) return 0;
	return vakken0[ander].grondHoogte - vakken0[ID].grondHoogte;
}


void main()
{
	float 	verschil 	= 0.0;
	
	for(int buur=0; buur < vakken0[ID].burenAantal && buur < 6; buur++)
		verschil += waterVerschil(vakken0[ID].buren[buur]);

//	verschil /= vakken0[ID].burenAantal;

	//if(vakken0[ID].waterHoogte 

	vakken1[ID].waterHoogte = max(0, vakken0[ID].waterHoogte + verschil);

	/*	float nieuwWaterhoogte = vakken0[ID].waterHoogte;

	if(vakken0[ID].grondSoort == GS_IJS && vakken0[ID].waterHoogte < 0.9)
		nieuwWaterhoogte = vakken0[ID].waterHoogte + 0.1;

	nieuwWaterhoogte += (verschil / vakken0[ID].burenAantal);

	vakken1[ID].waterHoogte = max(0, min(1, nieuwWaterhoogte));

	float gewensteGrondHoogte = 0.0f;

	for(int buur=0; buur < vakken0[ID].burenAantal && buur < 6; buur++)
		gewensteGrondHoogte += grondVerschil(vakken0[ID].buren[buur]);

	gewensteGrondHoogte /= vakken0[ID].burenAantal;

	if(abs(gewensteGrondHoogte - vakken0[ID].grondHoogte) > 0.001)
		vakken1[ID].grondHoogte = mix(gewensteGrondHoogte, vakken0[ID].grondHoogte, 0.99);
	else
		vakken1[ID].grondHoogte = vakken0[ID].grondHoogte;*/

	
}