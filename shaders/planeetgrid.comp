#version 440

layout(local_size_x = 16) in;

#define GS_ZAND		0
#define GS_GROND	1	//Ook wel humus of rijke grond
#define GS_ROTS		2
#define GS_KLEI		3
#define GS_IJS		4
#define GS_LOESS	5

#define ID gl_GlobalInvocationID.x

struct vakje
{
	int		grondSoort	;
	float 	grondHoogte	;
	float	waterHoogte	;
	float	leven		;
	int		iets		;
	int		burenAantal	;
	int		buren[6]	;
};

layout(std430, binding = 0) buffer 			ping 	{ vakje vakjes0[]; };
layout(std430, binding = 1) buffer 			pong 	{ vakje vakjes1[]; };

float waterVerschil(uint ander)
{
	if(ander == -1) return 0;
	return (vakjes0[ander].waterHoogte) - (vakjes0[ID].waterHoogte);
}

float grondVerschil(uint ander)
{
	if(ander == -1) return 0;
	return vakjes0[ander].grondHoogte;// - vakjes0[ID].grondHoogte;
}


void main()
{
/*	float 	verschil 	= 0.0;
	
	for(int buur=0; buur < vakjes0[ID].burenAantal && buur < 6; buur++)
		verschil += waterVerschil(vakjes0[ID].buren[buur]);

	float nieuwWaterhoogte = vakjes0[ID].waterHoogte;

	if(vakjes0[ID].grondSoort == GS_IJS && vakjes0[ID].waterHoogte < 0.9)
		nieuwWaterhoogte = vakjes0[ID].waterHoogte + 0.1;

	nieuwWaterhoogte += (verschil / vakjes0[ID].burenAantal);

	vakjes1[ID].waterHoogte = max(0, min(1, nieuwWaterhoogte));

	float gewensteGrondHoogte = 0.0f;

	for(int buur=0; buur < vakjes0[ID].burenAantal && buur < 6; buur++)
		gewensteGrondHoogte += grondVerschil(vakjes0[ID].buren[buur]);

	gewensteGrondHoogte /= vakjes0[ID].burenAantal;

	if(abs(gewensteGrondHoogte - vakjes0[ID].grondHoogte) > 0.001)
		vakjes1[ID].grondHoogte = mix(gewensteGrondHoogte, vakjes0[ID].grondHoogte, 0.99);
	else
		vakjes1[ID].grondHoogte = vakjes0[ID].grondHoogte;*/
}