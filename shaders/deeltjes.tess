#version 410 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 modelView;
uniform mat4 projection;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
} 

in vec3 normal[];


in VS_TS_VERTEX
{
	in vec3 normal;
	in vec3 pos;
} ts_in[];


out TS_FS_VERTEX
{
	out vec3 normal;
	out vec3 kleur;
} fs_in;

void main()
{
    // Interpolate the attributes of the output vertex using the barycentric coordinates
    fs_in.normal = normalize(interpolate3D(ts_in[0].normal, ts_in[1].normal, ts_in[2].normal));
    fs_in.kleur	 = (fs_in.normal + vec3(1.0)) * 0.5;
    
	gl_Position = 
		//projection * 
		modelView *
		vec4(
			normalize(
				interpolate3D(ts_in[0].pos, ts_in[1].pos, ts_in[2].pos)
			), 
			1.0
		);
} 