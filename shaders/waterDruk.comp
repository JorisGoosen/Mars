#version 440

layout(local_size_x = 16) in;

#define GS_ZAND		0
#define GS_GROND	1	//Ook wel humus of rijke grond
#define GS_ROTS		2
#define GS_KLEI		3
#define GS_IJS		4
#define GS_LOESS	5

#define ID gl_GlobalInvocationID.x

struct vak
{
	int		grondSoort	;
	float 	grondHoogte	;
	float	waterHoogte	;
	float	leven		;
	float	snelheid	;
	float	pijpen[6]	;
};

struct vakMetasS
{
	float	normaal[3]	;
	uint	burenAantal	;
	uint	buren[6]	;
};


layout(std430, binding = 0) buffer	pingVak { vak 		vakken0	[]; };
layout(std430, binding = 1) buffer	pongVak { vak 		vakken1	[]; };
layout(std430, binding = 2) buffer	vakInfo	{ vakMetasS	vakMetas[];	};

#define PIJP_LENGTE	1.0


uniform float verdamping;

// We hebben net in waterStroming.comp naar vakken1 geschreven, dus de nieuwe stromingswaardes staan daar.
// Maar we willen alsnog de nieuwe waterHoogte etc naar vakken1 schrijven, dus opletten.
void main()
{
	vec3 n;

	for(uint i=0; i<3; i++)
		n[i] = vakMetas[ID].normaal[i];

	uint 	aantalBuren = vakMetas[ID].burenAantal;
	float 	stroming 	= 0.0f;
	vec3	snelheid	= vec3(0.0f);
	vec3	buurNrml[6];

	for(uint buur=0; buur < aantalBuren && buur < 6; buur++)
	{	
		const uint 	buurID 		= vakMetas[ID].buren[buur],
					buurBuren 	= vakMetas[buurID].burenAantal;

		for(uint buurBuur=0; buurBuur < buurBuren; buurBuur++)
			if(vakMetas[buurID].buren[buurBuur] == ID)
			{
				for(uint i=0; i<3; i++)
					buurNrml[buur][i] = vakMetas[buurID].normaal[i];

				buurNrml[buur] = buurNrml[buur] - n;

				float stroomWeg = vakken1[buurID].pijpen[buurBuur] 	- vakken1[ID].pijpen[buur];

				stroming += stroomWeg;
				snelheid += buurNrml[buur] * stroomWeg;
				
				break;
			}
	}

	float verdampje = vakken0[ID].waterHoogte > 1.0 ? (1.0 / vakken0[ID].waterHoogte) * verdamping : verdamping;

	vakken1[ID].waterHoogte = max(0, (vakken0[ID].waterHoogte + (stroming / PIJP_LENGTE)) - verdampje);


	vakken1[ID].snelheid	= (length(snelheid) / aantalBuren) * 0.1;
}