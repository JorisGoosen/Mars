#version 440

layout(local_size_x = 16) in;

#define GS_ZAND		0
#define GS_GROND	1	//Ook wel humus of rijke grond
#define GS_ROTS		2
#define GS_KLEI		3
#define GS_IJS		4
#define GS_LOESS	5

#define ID gl_GlobalInvocationID.x

struct vak
{
	int		grondSoort	;
	float 	grondHoogte	;
	float	waterHoogte	;
	float	leven		;
	int		iets		;
	float	pijpen[6]	;
	uint	burenAantal	;
	uint	buren[6]	;
};

layout(std430, binding = 0) buffer 			pingVak 	{ vak  vakken0[]; };
layout(std430, binding = 1) buffer 			pongVak 	{ vak  vakken1[]; };

//Eigenlijk moeten dit uniforms zijn:
//#define TIJD_VERSCHIL 0.1
#define ZWAARTEKRACHT 1.0
#define PIJP_DOORSNEE 1.0
#define PIJP_LENGTE   1.0

// We hebben net in waterStroming.comp naar vakken1 geschreven, dus de nieuwe stromingswaardes staan daar.
// Maar we willen alsnog de nieuwe waterHoogte etc naar vakken1 schrijven, dus opletten.
void main()
{

	uint 	aantalBuren = vakken0[ID].burenAantal;
	float 	stroming 	= 0.0f;

	for(uint buur=0; buur < aantalBuren && buur < 6; buur++)
	{	
		const uint 	buurID 		= vakken0[ID].buren[buur],
					buurBuren 	= vakken0[buurID].burenAantal;

		for(uint buurBuur=0; buurBuur < buurBuren; buurBuur++)
			if(vakken0[buurID].buren[buurBuur] == ID)
			{
				stroming += vakken1[buurID].pijpen[buurBuur] - vakken1[ID].pijpen[buur];
				break;
			}
	}

	vakken1[ID].waterHoogte = vakken0[ID].waterHoogte + (stroming / PIJP_LENGTE);
}